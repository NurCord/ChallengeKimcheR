{"version":3,"sources":["components/Home.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Home","data","console","log","eg","className","name","capital","code","continent","currency","emojiU","languages","native","phone","schema","yup","shape","nameCountrie","max","strict","NavBar","searchByName","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","onSubmit","key","type","placeholder","GET_NAME_COUNTRIES","gql","App","useState","countrie","setCountrie","useQuery","loading","error","countries","length","filter","e","toLowerCase","split","splice","join","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kRAEe,SAASA,EAAT,GAAuB,IAARC,EAAO,EAAPA,KAC1BC,QAAQC,IAAIF,GACZ,IAAIG,EAAKH,GAAQA,EAAK,GACtB,OACI,6BACI,yBAAKI,UAAU,wCACX,wBAAIA,UAAU,cAAd,OAA4BD,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAIE,MADpC,OAEKF,QAFL,IAEKA,OAFL,EAEKA,EAAIG,QAFT,OAGKH,QAHL,IAGKA,OAHL,EAGKA,EAAII,KAHT,OAIKJ,QAJL,IAIKA,OAJL,EAIKA,EAAIK,UAAUH,KAJnB,OAKKF,QALL,IAKKA,OALL,EAKKA,EAAIM,SALT,OAMKN,QANL,IAMKA,OANL,EAMKA,EAAIO,OANT,OAOKP,QAPL,IAOKA,OAPL,EAOKA,EAAIQ,UAAUN,KAPnB,OAQKF,QARL,IAQKA,OARL,EAQKA,EAAIE,KART,OASKF,QATL,IASKA,OATL,EASKA,EAAIS,OATT,OAUKT,QAVL,IAUKA,OAVL,EAUKA,EAAIU,Q,6BCZfC,EAASC,MAAaC,MAAM,CAC9BC,aAAcF,MAAaG,IAAI,IAAIC,WAGxB,SAASC,EAAT,GAAiC,IAAhBC,EAAe,EAAfA,aAAe,EACaC,YAAQ,CAC9DC,SAAUC,YAAYV,KADhBW,EADmC,EACnCA,SAAUC,EADyB,EACzBA,aAA0BC,EADD,EACXC,UAAYD,OAO9C,OACE,6BACI,0BAAME,SAAUH,GALpB,YAAkC,IAAfT,EAAc,EAAdA,aACfI,EAAaJ,OAKT,yCACIa,IAAI,eACJC,KAAK,OACL1B,KAAK,eACL2B,YAAY,aACRP,EAAS,kBAEhBE,EAAOV,cAAgB,2BAAIU,EAAOV,cACnC,2BAAOc,KAAK,a,+XCrBjB,IAAME,EAAqBC,YAAH,KAuBhB,SAASC,IAAO,IAAD,EACIC,mBAAS,MADb,mBACrBC,EADqB,KACXC,EADW,OAEGC,YAASN,GAAjCO,EAFqB,EAErBA,QAASC,EAFY,EAEZA,MAAOzC,EAFK,EAELA,KAEvB,GAAGwC,EAAS,OAAO,sCACnB,GAAGC,EAAO,OAAO,oCAQjB,OACE,yBAAKrC,UAAU,cACb,kBAACgB,EAAD,CAAQC,aARQ,SAAChB,IACZ,OAAJL,QAAI,IAAJA,OAAA,EAAAA,EAAM0C,UAAUC,QAAS,GAC1BL,EAAW,OAACtC,QAAD,IAACA,OAAD,EAACA,EAAM0C,UAAUE,QAAO,SAAAC,GAAC,OAAIA,EAAExC,KAAKyC,cAAcC,MAAM,IAAIC,OAAO,EAAG3C,EAAKsC,QAAQM,KAAK,MAAQ5C,SAO3G,kBAACN,EAAD,CAAMC,KAAMqC,KClCEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+BCXAC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,sCACLC,MAAO,IAAIC,MAGbC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAgBP,OAAQA,GACtB,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,QAIJC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLxC,QAAQwC,MAAMA,EAAMgC,c","file":"static/js/main.e932a13a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Home({data}) {\r\n    console.log(data);\r\n    let eg = data && data[0]\r\n    return (\r\n        <div>\r\n            <div className=\"text-sm font-bold underline bg-black\">\r\n                <h1 className='bg-red-400'>{eg?.name}</h1>\r\n                {eg?.capital}\r\n                {eg?.code}\r\n                {eg?.continent.name}\r\n                {eg?.currency}                    \r\n                {eg?.emojiU}\r\n                {eg?.languages.name}\r\n                {eg?.name}\r\n                {eg?.native}\r\n                {eg?.phone}\r\n            </div>\r\n        \r\n                {/* {\r\n                data?.map(e => \r\n                    <div>\r\n                        {e.capital}\r\n                        {e.code}\r\n                        {e.continent.name}\r\n                        {e.currency}                    \r\n                        {e.emojiU}\r\n                        {e.languages.name}\r\n                        {e.name}\r\n                        {e.native}\r\n                        {e.phone}\r\n                    </div>\r\n                )            \r\n            } */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nconst schema = yup.object().shape({\r\n    nameCountrie: yup.string().max(40).strict(),\r\n  })\r\n  \r\nexport default function NavBar({searchByName}) {\r\n    const { register, handleSubmit, formState: {errors} } = useForm({\r\n      resolver: yupResolver(schema),\r\n    })\r\n  \r\n    function onSubmit({nameCountrie}){\r\n        searchByName(nameCountrie)\r\n    } \r\n  return (\r\n    <div>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <input \r\n                key='nameCountrie' \r\n                type='text' \r\n                name='nameCountrie' \r\n                placeholder='search...'\r\n                {...register(\"nameCountrie\")} \r\n                />\r\n            {errors.nameCountrie && <p>{errors.nameCountrie}</p>}\r\n            <input type=\"submit\"/>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport NavBar from \"./components/NavBar\";\nimport Loading from \"./components/Loading\";\nimport { gql, useQuery, useLazyQuery} from '@apollo/client';\n\nexport const GET_NAME_COUNTRIES = gql`\n  query{\n    countries{\n      code\n        name\n        native\n        phone\n        continent{\n          code\n          name\n        }\n        capital\n        currency\n        languages{\n          code\n          name\n          native\n        }\n        emojiU\n    }\n  }\n`;\n\nexport default function App() {\n  const [countrie, setCountrie] = useState(null)\n  const {loading, error, data} = useQuery(GET_NAME_COUNTRIES)\n  \n  if(loading) return <p>Loading</p>\n  if(error) return <p>error</p>\n\n  const getCountrie = (name) => {\n    if(data?.countries.length > 0){\n      setCountrie(data?.countries.filter(e => e.name.toLowerCase().split('').splice(0, name.length).join('') === name))\n    }\n  }\n\n  return (\n    <div className=\"bg-red-300\">\n      <NavBar searchByName={getCountrie}/>\n      <Home data={countrie}/>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient,InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com/\",\n  cache: new InMemoryCache(),\n}); \n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}